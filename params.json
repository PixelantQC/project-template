{"name":"Pixelant QC Template","tagline":"Nightwatch and Galen environment for running tests Locally(SeleniumServer) or on Browserstack or Saucelabs","body":"# Introduction\r\nThis is a template project which helps you to automate and check your site's **layout** with a help of [Galen Faramework](http://galenframework.com/).\r\nAnd site's **functionality** using [Nightwatch.js](http://nightwatchjs.org/).\r\nThis project also contains configuration for selenium server to run tests locally. It also includes cloud based configuration to run your tests on web services like: [SauceLabs](https://saucelabs.com/) and [Browserstack](http://browserstack.com/).\r\n\r\n\r\n# Installation\r\nTo run these sample tests, you need to _setup_ your environment _first_:\r\n\r\n\r\n## Node and NPM\r\n[https://nodejs.org/en/](https://nodejs.org/en/)\r\n\r\n\r\n## Selenium server\r\nYou need to fire up selenium server(standalone or chrome or safari for firing up your locally installed specific browser) to run your Nightwatch test _locally_.\r\n\r\n**Download:** [http://www.seleniumhq.org/download/](http://www.seleniumhq.org/download/)\r\n\r\n\r\n## Java\r\nYou need _java_(JDK and JRE) to run selenium server:\r\n\r\n**Download:** [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n\r\n\r\n## Nightwatch and Galen\r\n_Two simple commands to install testing frameworks globally(-g flag) after you've installed npm:_\r\n\r\n`$ sudo npm install -g galenframework-cli`\r\n\r\n`$ sudo npm install -g nightwatch`\r\n\r\n\r\n## SauceLabs and Browserstack environment variables\r\nI set my **username** and **access_key** for these services as environment variables. I need these for running **Nightwatch** tests. So my configuration needs your to export this variables in .bash_profile like this:\r\n\r\n`$ sudo nano ~/.bash_profile`\r\n\r\nAnd paste there your new variables:\r\n\r\n    export BROWSERSTACK_USER=\"_your_browserstack_user_\"\r\n    export BROWSERSTACK_KEY=\"_your_browserstack_access_key_\"\r\n    export SAUCE_USER=\"_your_saucelabs_user_\"\r\n    export SAUCE_KEY=\"_your_saucelabs_access_key_\"\r\n\r\n\r\n## SauceLabs and Browserstack secret.test\r\nTo run **Galen** tests you need to create `secret.test` file in Galen/ root folder(same folder for Galen configuration files).\r\nYou need to set there `browserstack_url` and `saucelabs_url`. It should look like this:\r\n\r\n\r\n_# your secret.test_\r\n\r\n    @@ set\r\n      browserstack_url http://browserstack_username:access_key@hub.browserstack.com/wd/hub\r\n      saucelabs_url http://saucelabs_username:access_key@ondemand.saucelabs.com:80/wd/hub\r\n\r\n## Install html-reports npm module for Nightwatch.js\r\n\r\n`$ cd Nightwatch/`\r\n\r\n`$ npm install`\r\n\r\n\r\n# Running your tests\r\nTo run sample tests you should look into both _package.json_ in Nightwatch and Galen folders. There are many predefined scripts for easily running your tests in any environment you want: Saucelabs, Browserstack or just locally. Also in package.json you could see my scripts for exporting Nightwatch and Galen test reports to my Dropbox Desktop folder on my Mac. You can freely redefine them for you needs or write new ones.\r\n\r\nFor example to run all Nightwatch desktop tests on Saucelabs:\r\n\r\n    $ cd Nightwatch/\r\n    $ npm run sl-desktop\r\n\r\nOr to run _home-page.js_ test locally(don't forget to fire up your local **selenium server**). _**Note**_: to run **Galen** tests - you **don't need** to run your selenium-server instance:\r\n\r\n    $ cd Nightwatch/\r\n    $ npm run home\r\n\r\nSame logic works for Galen Framework. To run all your browserstack mobile tests silently(-s flag means - no npm errors in terminal are shown):\r\n\r\n    $ cd Galen/\r\n    $ npm run bs-mobile\r\n\r\n\r\n# Reports\r\nAll the html reports of completed tests you can open in your prefered browser. Local reports located in `Nightwatch/reports/` and `Galen/reports/` folders. All Browserstack and Saucelabs reports situated in `Nightwatch/browserstack_reports/` and `Galen/saucelabs_reports/` folders.\r\n\r\n\r\n# SauceLabs/Nightwatch specialties\r\nIn [Nightwatch/scripts](https://github.com/PixelantQC/project-template/tree/master/Nightwatch/scripts) folder there is a script called [report.js](https://github.com/PixelantQC/project-template/blob/master/Nightwatch/scripts/report.js). This script(if combined with `afterEach` method which defined in _home-page.js_) defines the status of the job which ran in SauceLabs dashboard. I mean it sets 'passed' or 'failed' status of finished test instead of 'completed'. This is quite helpful when analysing your testing results.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}